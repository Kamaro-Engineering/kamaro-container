# If not running interactively, don't do anything
[[ $- != *i* ]] && return

#Disable Ctrl-S
stty -ixon

# do not put duplicate lines or lines starting with space in the history
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

HISTSIZE=10000
HISTFILESIZE=20000

shopt -s globstar
shopt -s checkwinsize

PROMPT_DIRTRIM=2
MACHINE_NAME="melodic"

_set_prompt() {
  local yellow='\[$(tput setaf 11)\]'
  local grey='\[$(tput setaf 8)\]'
  local reset='\[$(tput sgr0)\]'
  local bold='\[$(tput bold)\]'
  if [ -z "${ROBOT_NAME}" ]; then
    local win_title="\[\e]2;\u@${MACHINE_NAME}:\W\a\]"
  else
    local win_title="\[\e]2;\u@${MACHINE_NAME}:\W - ${ROBOT_NAME} ${ROS_IP:+(remote)}\a\]"
  fi
  local prompt_name="${ROBOT_NAME:-${MACHINE_NAME}}${ROS_IP:+(remote)}"

  PS1="${win_title}${bold}${yellow}${prompt_name}${reset}:${bold}${grey}\w${yellow}\$${reset} "
}
_set_prompt

alias ls='ls --color=auto --human-readable'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias gittree='git log --graph --decorate --oneline --all'
alias gits='git status'

#ROS
#Explicitly fail if not found
source /opt/ros/melodic/setup.bash

export ROS_HOSTNAME=localhost
export ROS_MASTER_URI=http://localhost:11311

[ -f ~/.workspaces ] && source ~/.workspaces

# source a workspace defined in associative array WORKSPACES
rob() {
  if [ -z "${WORKSPACES[$1]}" ]; then
    echo "Unknown robot '$1'"
    return 1
  fi
  ROBOT_NAME="$1"
  set -- ${WORKSPACES[$1]}
  local ws_dir="$1"
  ROBOT_WORKING_DIR="${ws_dir/#~/$HOME}" # expand tilde
  ROBOT_IP="$2"
  if ! source "$ROBOT_WORKING_DIR/devel/setup.bash"; then
    return 1
  fi

  unset -v ROS_IP
  export ROS_HOSTNAME=localhost
  export ROS_MASTER_URI=http://localhost:11311
  _set_prompt
}

# if only one workspace defined, source it automatically
if [[ "${#WORKSPACES[*]}" == 1 ]]; then
  rob "${!WORKSPACES[*]}"
fi

# Remote ROS connection with robot
rob-remote() {
  if [ -z "$ROBOT_NAME" ]; then
    echo "No robot selected."
    return 1
  fi
  if [ -z "$ROBOT_IP" ]; then
    echo "No ip address configured for current robot."
    return 1
  fi
  # own ip in robots network, assuming subnet /24
  local own_ip="$(hostname --all-ip-addresses | grep -oE "${ROBOT_IP%.*}\.[0-9]+")"
  if [ -z "$own_ip" ]; then
    echo "It seems like you are not in the same network as the robot:"
    echo "current ips: $(hostname --all-ip-addresses)"
    echo "robot ip: ${ROBOT_IP}"
    return 1
  fi
  unset -v ROS_HOSTNAME
  export ROS_MASTER_URI="http://$ROBOT_IP:11311"
  # This forces ROS to identify this computer using its IP instead of the hostname which the robot cannot resolve
  export ROS_IP="$own_ip"
  _set_prompt
}


_rob_completion() {
  local curr_arg
  curr_arg=${COMP_WORDS[COMP_CWORD]}
  if [[ "$COMP_CWORD" == 1 ]]; then
    COMPREPLY=( $(compgen -W "${!WORKSPACES[*]}" -- $curr_arg) )
  else
    COMPREPLY=( $(compgen -c -- $curr_arg ) )
  fi
}
complete -F _rob_completion rob

